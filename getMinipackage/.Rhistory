}else{
full_table$readthrough = ifelse(overlapcount > 2 & row.names(completeoverlap) %in% completeoverlap,1,0)
}
gr = GRanges(subset(full_table,readthrough == 1))
idx = subset(full_table,readthrough == 1)$ID
overlaps = as.data.frame(findOverlaps(gr,cod_gr))
splitoverlaps = split(overlaps,f = overlaps$queryHits)
table(sapply(splitoverlaps,nrow) > 1)
cod_grL = sapply(splitoverlaps,function(x) cod_gr[x$subjectHits])
overlapL = sapply(cod_grL,function(x) findOverlaps(x))
notoverlap = sapply(overlapL,function(x) identical(queryHits(x),subjectHits(x)))
full_table$readthrough = ifelse(full_table$readthrough == 1 & !notoverlap,1,0)
return(full_table)
}
View(getReadthrough)
#' getReadthrough function
#'
#' @describe A getReadthrough functions that will The getReadthrough function is
#'   used to find long transcripts that covers more than two coding regions of a
#'   genome. The variables are as follows:
#'
#' @param minoverlap Detects minimum overlap between two IRanges objects.
#'   Details Overlap arguments are included in the IRanges package.
#' @param gr A GRanges object that shows the start and end loci on genome}
#' @param cod_gr A GRanges object that contains coding regions. ,
#'
#' @format A function that takes two argument and provide transcipts overlaping
#'   more than one protein region.
#' \itemize{
#'   \item{queryHits}{A HitsList-class that stores hits objects}
#'   \item{subjectHits}{Subclass of hits thats store hits by subject}
#'   \item{aggregate}{a ggplot function that calculates an average value}
#' }
#'
#' @details For details of findOverlaps, type.partialOverlap, type.50Overlap
#' type.toPlot, queryhits, and subjecthits see:
#' [GenomicRanges](https://www.bioconductor.org/packages/release/bioc/html/GenomicRanges.html)
#' [IRanges](https://www.bioconductor.org/packages/release/bioc/html/IRanges.html),
#' and [BiocManager](http://bioconductor.org/install/index.html)
#'
#' @return Returns the classified transcriptome biotypes.
#' @usage getReadthrough(gr,cod_gr)
#'
#' @source [Refrence GRCh37 genome](https://www.gencodegenes.org/human/release_25lift37.html)
#' for details on gtf format visit [ensemble](https://useast.ensembl.org/info/website/upload/gff.html)
#'
#' @import GenomicRanges
#' @importFrom stats aggregate
#'
#' @references
#'
#' Wang, Z. Z., J. M. Cunningham and X. H. Yang (2018)."CisPi: a transcriptomic score for disclosing cis-acting disease-associated lincRNAs."
#' Bioinformatics34(17): 664-670"
#'
#' @examples
#' load(file="data/gencode_gr.v19_chr21.rda")
#' load(file="data/ILEF_gr.chr21.rda")
#' load(file="data/cod_gr.chr21.rda")
#' getReadthrough(ILEF_gr,cod_gr)
#'
#' \dontrun{getReadthrough(cod_gr")}
#'
#' @note
#' Replace the path_file when loading data locally to the data directory.
#' For details on subjecthits,
#'
#' @import GenomicRanges
#' @importFrom stats aggregate
#' @export
getReadthrough <- function(gr,cod_gr){
full_table = data.frame(gr)
overlapcount = countOverlaps(gr,cod_gr)
completeoverlap = unique(subjectHits(findOverlaps(cod_gr,GRanges(full_table$ID),type = 'within')))
if (length(completeoverlap) == 0) {
full_table$readthrough = ifelse(overlapcount > 2,1,0)
}else{
full_table$readthrough = ifelse(overlapcount > 2 & row.names(completeoverlap) %in% completeoverlap,1,0)
}
gr = GRanges(subset(full_table,readthrough == 1))
idx = subset(full_table,readthrough == 1)$ID
overlaps = as.data.frame(findOverlaps(gr,cod_gr))
splitoverlaps = split(overlaps,f = overlaps$queryHits)
table(sapply(splitoverlaps,nrow) > 1)
cod_grL = sapply(splitoverlaps,function(x) cod_gr[x$subjectHits])
overlapL = sapply(cod_grL,function(x) findOverlaps(x))
notoverlap = sapply(overlapL,function(x) identical(queryHits(x),subjectHits(x)))
full_table$readthrough = ifelse(full_table$readthrough == 1 & !notoverlap,1,0)
return(full_table)
}
#' getBiotypes function
#'
#' @aliases getBiotypes
#'
#' @description The purpose of the getBiotypes function is to class both
#'   coding and noncoding transcripts into biotypes using the most recent
#'   GENCODE annotations. This tool can also be used to define potential
#'   lncRNAs, given an available genome transcriptome assembly (a gtf file) or
#'   any genomic loci of interest.
#'
#' @param full_gr A GRanges object of coding and noncoding transctipts. Unique
#'   identifications for each column must be assigned.More details can be found
#'   in the GRanges package.
#' @param gencode_gr This GRanges object contains a GENCODE reference
#'   annotation.It must have a column of biotypes.
#' @param intron_gr A GRanges object containing the coordinates of introns.For
#'   details see GRanges package.
#' @param minoverlap Detects minimum overlap between two IRanges objects.
#'   Details Overlap arguments are included in the IRanges package.
#'
#' @details For details of findOverlaps, type.partialOverlap, type.50Overlap
#' type.toPlot, queryhits, and subjecthits see:
#' [GenomicRanges](https://www.bioconductor.org/packages/release/bioc/html/GenomicRanges.html)
#' [IRanges](https://www.bioconductor.org/packages/release/bioc/html/IRanges.html),
#' and [BiocManager](http://bioconductor.org/install/index.html)
#'
#' @return Returns the classified transcriptome biotypes.
#'
#' @source [Refrence GRCh37 genome](https://www.gencodegenes.org/human/release_25lift37.html)
#' for details on gtf format visit [ensemble](https://useast.ensembl.org/info/website/upload/gff.html)
#' @import GenomicRanges
#'
#' @references
#'
#' Wang, Z. Z., J. M. Cunningham and X. H. Yang (2018)."CisPi: a transcriptomic score for disclosing cis-acting disease-associated lincRNAs."
#' Bioinformatics34(17): 664-670"
#'
#' @examples
#' #Input datasets locally
#' #load(file="data/gencode_gr.v19_chr21.rda")
#' #load(file="data/intron_gr.chr21.rda")
#' #load("data/ILEF_gr.chr21.rda")
#' #example 1 using getBiotypes
#' getBiotypes(ILEF_gr,gencode_gr)
#'
#' \dontrun{getBiotypes("intron_gr")}
#'
#' @note
#' Replace the path_file when loading data locally to the data directory.
#' For details on subjecthits,
#'
#' @import GenomicRanges
#' @importFrom stats aggregate
#' @export
getBiotypes <- function(full_gr, gencode_gr, intron_gr=NULL, minoverlap=1L){
## check input format ##########
if(class(full_gr) != "GRanges") stop('please give full_gr as a "GRanges" object')
if(class(gencode_gr) != "GRanges") stop('pealse give gencode_gr as a "GRanges" object')
if(class(intron_gr) != "GRanges" & !is.null(intron_gr)) stop('please give intron_gr as a "GRanges" object')
## find transcripts overlap with any GENCODe annotated transcripts ##########
hits = findOverlaps(full_gr, gencode_gr,
type = 'within',
minoverlap=minoverlap)
## derive the unique index from full_gr
full = as.data.frame(full_gr)
full$type.fullOverlap = 'de novo'
idx = as.data.frame(mcols(full_gr[queryHits(hits)]))
if(nrow(idx) != 0){
idx$biotype = as.data.frame(mcols(gencode_gr[subjectHits(hits)]))[,1]
idx_collapse = aggregate(as.list(idx['biotype']), idx['Row.names'],
FUN = function(X) paste(unique(X), collapse=", "))
idx_full = match(idx_collapse$Row.names,full$Row.names)
full[idx_full,]$type.fullOverlap = idx_collapse$biotype
}
hits = findOverlaps(full_gr, gencode_gr,
minoverlap=minoverlap)
overlaps <- pintersect(full_gr[queryHits(hits)], gencode_gr[subjectHits(hits)])
percentOverlap <- width(overlaps) / width(gencode_gr[subjectHits(hits)])
idx = as.data.frame(mcols(full_gr[queryHits(hits)]))
idx$biotype = as.data.frame(mcols(gencode_gr[subjectHits(hits)]))
idx_collapse = aggregate(as.list(idx['biotype']), idx['Row.names'],
FUN = function(X) paste(unique(X), collapse=", "))
full$type.partialOverlap = 'de novo'
idx_partial = match(idx_collapse$Row.names,full$Row.names)
full[idx_partial,]$type.partialOverlap = idx_collapse$biotype
idx$percentOverlap = percentOverlap
idx_50 = subset(idx,percentOverlap >= 0.5)
idx_50collapse = aggregate(as.list(idx_50['biotype']), idx_50['Row.names'],
FUN = function(X) paste(unique(X), collapse = ", "))
full$type.50Overlap = 'de novo'
idx_50 = match(idx_50collapse$Row.names,full$Row.names)
full[idx_50,]$type.50Overlap = idx_50collapse$biotype
if(!is.null(intron_gr)){
## check introns ##########
hits = findOverlaps(full_gr, intron_gr)
idx = unique(as.data.frame(mcols(full_gr[queryHits(hits)])))
full$hasIntron = 'no'
idx_intron = match(idx$Row.names,full$Row.names)
if(length(idx_intron) !=  0) full[idx_intron,]$hasIntron = 'yes'
}else(full$hasIntron = NA)
full$type.toPlot = ifelse(full$hasIntron == 'yes' & full$type.50Overlap == 'protein_coding',
'protein_coding_intron',full$type.50Overlap)
## grouping into 11 biotypes  ##########
full$type.toPlot = sapply(full$type.toPlot,function(x)
ifelse(grepl('protein_coding',x) & grepl('antisense',x), 'protein_coding_antisense',x))
full$type.toPlot = sapply(full$type.toPlot,function(x)
ifelse(grepl('protein_coding,',x), 'protein_coding_mixed',x))
full$type.toPlot = sapply(full$type.toPlot,function(x)
ifelse(grepl(', protein_coding',x), 'protein_coding_mixed',x))
full$type.toPlot = sapply(full$type.toPlot,function(x)
ifelse(grepl('lincRNA',x), 'lincRNA',x))
full$type.toPlot = sapply(full$type.toPlot,function(x)
ifelse(grepl('antisense,',x), 'antisense',x))
full$type.toPlot = sapply(full$type.toPlot,function(x)
ifelse(grepl(', antisense',x), 'antisense',x))
label = c('protein_coding',
'protein_coding_mixed',
'lincRNA',
'antisense',
'pseudogene, processed_pseudogene',
'pseudogene, unprocessed_pseudogene',
'de novo',
'protein_coding_antisense',
'protein_coding_intron',
'miRNA')
full$type.toPlot = sapply(full$type.toPlot,function(x)
ifelse(!x %in% label,'other_noncoding',x))
return(full)
}
View(getBiotypes)
View(getReadthrough)
#' getReadthrough function
#'
#' @describe A getReadthrough functions that will The getReadthrough function is
#'   used to find long transcripts that covers more than two coding regions of a
#'   genome. The variables are as follows:
#'
#' @param minoverlap Detects minimum overlap between two IRanges objects.
#'   Details Overlap arguments are included in the IRanges package.
#' @param gr A GRanges object that shows the start and end loci on genome}
#' @param cod_gr A GRanges object that contains coding regions. ,
#'
#' @format A function that takes two argument and provide transcipts overlaping
#'   more than one protein region.
#' \itemize{
#'   \item{queryHits}{A HitsList-class that stores hits objects}
#'   \item{subjectHits}{Subclass of hits thats store hits by subject}
#'   \item{aggregate}{a ggplot function that calculates an average value}
#' }
#'
#' @details For details of findOverlaps, type.partialOverlap, type.50Overlap
#' type.toPlot, queryhits, and subjecthits see:
#' [GenomicRanges](https://www.bioconductor.org/packages/release/bioc/html/GenomicRanges.html)
#' [IRanges](https://www.bioconductor.org/packages/release/bioc/html/IRanges.html),
#' and [BiocManager](http://bioconductor.org/install/index.html)
#'
#' @return Returns the classified transcriptome biotypes.
#' @usage getReadthrough(gr,cod_gr)
#'
#' @source [Refrence GRCh37 genome](https://www.gencodegenes.org/human/release_25lift37.html)
#' for details on gtf format visit [ensemble](https://useast.ensembl.org/info/website/upload/gff.html)
#'
#' @import GenomicRanges
#' @importFrom stats aggregate
#'
#' @references
#'
#' Wang, Z. Z., J. M. Cunningham and X. H. Yang (2018)."CisPi: a transcriptomic score for disclosing cis-acting disease-associated lincRNAs."
#' Bioinformatics34(17): 664-670"
#'
#' @examples
#' load(file="data/gencode_gr.v19_chr21.rda")
#' load(file="data/ILEF_gr.chr21.rda")
#' load(file="data/cod_gr.chr21.rda")
#'
#' getReadthrough(ILEF_gr,cod_gr)
#'
#' \dontrun{getReadthrough(cod_gr")}
#'
#' @note
#' Replace the path_file when loading data locally to the data directory.
#' For details on subjecthits,
#'
#' @import GenomicRanges
#' @importFrom stats aggregate
#' @export
getReadthrough <- function(gr,cod_gr){
full_table = data.frame(gr)
overlapcount = countOverlaps(gr,cod_gr)
completeoverlap = unique(subjectHits(findOverlaps(cod_gr,GRanges(full_table$ID),type = 'within')))
if (length(completeoverlap) == 0) {
full_table$readthrough = ifelse(overlapcount > 2,1,0)
}else{
full_table$readthrough = ifelse(overlapcount > 2 & row.names(completeoverlap) %in% completeoverlap,1,0)
}
gr = GRanges(subset(full_table,readthrough == 1))
idx = subset(full_table,readthrough == 1)$ID
overlaps = as.data.frame(findOverlaps(gr,cod_gr))
splitoverlaps = split(overlaps,f = overlaps$queryHits)
table(sapply(splitoverlaps,nrow) > 1)
cod_grL = sapply(splitoverlaps,function(x) cod_gr[x$subjectHits])
overlapL = sapply(cod_grL,function(x) findOverlaps(x))
notoverlap = sapply(overlapL,function(x) identical(queryHits(x),subjectHits(x)))
full_table$readthrough = ifelse(full_table$readthrough == 1 & !notoverlap,1,0)
return(full_table)
}
#' getReadthrough function
#'
#' @describe
#' A getReadthrough functions that will The getReadthrough function is used to
#' find long transcripts that covers more than two coding regions of a genome.
#' The variables are as follows.
#'
#' @param minoverlap Detects minimum overlap between two IRanges objects.
#'   Details Overlap arguments are included in the IRanges package.
#' @param gr A GRanges object that shows the start and end loci on genome}
#' @param cod_gr A GRanges object that contains coding regions. ,
#'
#' @format A function that takes two argument and provide transcipts overlaping
#'   more than one protein region.
#' \itemize{
#'   \item{queryHits}{A HitsList-class that stores hits objects}
#'   \item{subjectHits}{Subclass of hits thats store hits by subject}
#'   \item{aggregate}{a ggplot function that calculates an average value}
#' }
#'
#' @details For details of findOverlaps, type.partialOverlap, type.50Overlap
#' type.toPlot, queryhits, and subjecthits see:
#' [GenomicRanges](https://www.bioconductor.org/packages/release/bioc/html/GenomicRanges.html)
#' [IRanges](https://www.bioconductor.org/packages/release/bioc/html/IRanges.html),
#' and [BiocManager](http://bioconductor.org/install/index.html)
#'
#' @return Returns the classified transcriptome biotypes.
#' @usage getReadthrough(gr,cod_gr)
#'
#' @source [Refrence GRCh37 genome](https://www.gencodegenes.org/human/release_25lift37.html)
#' for details on gtf format visit [ensemble](https://useast.ensembl.org/info/website/upload/gff.html)
#'
#' @import GenomicRanges
#' @importFrom stats aggregate
#'
#' @references
#'
#' Wang, Z. Z., J. M. Cunningham and X. H. Yang (2018)."CisPi: a transcriptomic score for disclosing cis-acting disease-associated lincRNAs."
#' Bioinformatics34(17): 664-670"
#'
#' @examples
#' load(file="data/gencode_gr.v19_chr21.rda")
#' load(file="data/ILEF_gr.chr21.rda")
#' load(file="data/cod_gr.chr21.rda")
#'
#' getReadthrough(ILEF_gr,cod_gr)
#'
#' \dontrun{getReadthrough(cod_gr")}
#'
#' @note
#' Replace the path_file when loading data locally to the data directory.
#' For details on subjecthits,
#'
#' @import GenomicRanges
#' @importFrom stats aggregate
#' @export
getReadthrough <- function(gr,cod_gr){
full_table = data.frame(gr)
overlapcount = countOverlaps(gr,cod_gr)
completeoverlap = unique(subjectHits(findOverlaps(cod_gr,GRanges(full_table$ID),type = 'within')))
if (length(completeoverlap) == 0) {
full_table$readthrough = ifelse(overlapcount > 2,1,0)
}else{
full_table$readthrough = ifelse(overlapcount > 2 & row.names(completeoverlap) %in% completeoverlap,1,0)
}
gr = GRanges(subset(full_table,readthrough == 1))
idx = subset(full_table,readthrough == 1)$ID
overlaps = as.data.frame(findOverlaps(gr,cod_gr))
splitoverlaps = split(overlaps,f = overlaps$queryHits)
table(sapply(splitoverlaps,nrow) > 1)
cod_grL = sapply(splitoverlaps,function(x) cod_gr[x$subjectHits])
overlapL = sapply(cod_grL,function(x) findOverlaps(x))
notoverlap = sapply(overlapL,function(x) identical(queryHits(x),subjectHits(x)))
full_table$readthrough = ifelse(full_table$readthrough == 1 & !notoverlap,1,0)
return(full_table)
}
#' getBiotypes function
#'
#' @aliases getBiotypes
#'
#' @description
#' The purpose of the getBiotypes function is to class both coding and noncoding
#' transcripts into biotypes using the most recent GENCODE annotations. This
#' tool can also be used to define potential lncRNAs, given an available genome
#' transcriptome assembly (a gtf file) or any genomic loci of interest.
#'
#' @param full_gr A GRanges object of coding and noncoding transctipts. Unique
#'   identifications for each column must be assigned.More details can be found
#'   in the GRanges package.
#' @param gencode_gr This GRanges object contains a GENCODE reference
#'   annotation.It must have a column of biotypes.
#' @param intron_gr A GRanges object containing the coordinates of introns.For
#'   details see GRanges package.
#' @param minoverlap Detects minimum overlap between two IRanges objects.
#'   Details Overlap arguments are included in the IRanges package.
#'
#' @details For details of findOverlaps, type.partialOverlap, type.50Overlap
#' type.toPlot, queryhits, and subjecthits see
#' [GenomicRanges](https://www.bioconductor.org/packages/release/bioc/html/GenomicRanges.html)
#' [IRanges](https://www.bioconductor.org/packages/release/bioc/html/IRanges.html),
#' and [BiocManager](http://bioconductor.org/install/index.html).
#'
#' @return Returns the classified transcriptome biotypes.
#'
#' @source [Refrence GRCh37 genome](https://www.gencodegenes.org/human/release_25lift37.html)
#' for details on gtf format visit [ensemble](https://useast.ensembl.org/info/website/upload/gff.html)
#' @import GenomicRanges
#'
#' @references
#'
#' Wang, Z. Z., J. M. Cunningham and X. H. Yang (2018)."CisPi: a transcriptomic score for disclosing cis-acting disease-associated lincRNAs."
#' Bioinformatics34(17): 664-670"
#'
#' @examples
#' #Input datasets locally
#' load(file="data/gencode_gr.v19_chr21.rda")
#' load(file="data/intron_gr.chr21.rda")
#' load("data/ILEF_gr.chr21.rda")
#'
#' getBiotypes(ILEF_gr,gencode_gr)
#'
#' \dontrun{getBiotypes("intron_gr")}
#'
#' @note
#' Replace the path_file when loading data locally to the data directory.
#' For details on subjecthits,
#'
#' @import GenomicRanges
#' @importFrom stats aggregate
#' @export
getBiotypes <- function(full_gr, gencode_gr, intron_gr=NULL, minoverlap=1L){
## check input format ##########
if(class(full_gr) != "GRanges") stop('please give full_gr as a "GRanges" object')
if(class(gencode_gr) != "GRanges") stop('pealse give gencode_gr as a "GRanges" object')
if(class(intron_gr) != "GRanges" & !is.null(intron_gr)) stop('please give intron_gr as a "GRanges" object')
## find transcripts overlap with any GENCODe annotated transcripts ##########
hits = findOverlaps(full_gr, gencode_gr,
type = 'within',
minoverlap=minoverlap)
## derive the unique index from full_gr
full = as.data.frame(full_gr)
full$type.fullOverlap = 'de novo'
idx = as.data.frame(mcols(full_gr[queryHits(hits)]))
if(nrow(idx) != 0){
idx$biotype = as.data.frame(mcols(gencode_gr[subjectHits(hits)]))[,1]
idx_collapse = aggregate(as.list(idx['biotype']), idx['Row.names'],
FUN = function(X) paste(unique(X), collapse=", "))
idx_full = match(idx_collapse$Row.names,full$Row.names)
full[idx_full,]$type.fullOverlap = idx_collapse$biotype
}
hits = findOverlaps(full_gr, gencode_gr,
minoverlap=minoverlap)
overlaps <- pintersect(full_gr[queryHits(hits)], gencode_gr[subjectHits(hits)])
percentOverlap <- width(overlaps) / width(gencode_gr[subjectHits(hits)])
idx = as.data.frame(mcols(full_gr[queryHits(hits)]))
idx$biotype = as.data.frame(mcols(gencode_gr[subjectHits(hits)]))
idx_collapse = aggregate(as.list(idx['biotype']), idx['Row.names'],
FUN = function(X) paste(unique(X), collapse=", "))
full$type.partialOverlap = 'de novo'
idx_partial = match(idx_collapse$Row.names,full$Row.names)
full[idx_partial,]$type.partialOverlap = idx_collapse$biotype
idx$percentOverlap = percentOverlap
idx_50 = subset(idx,percentOverlap >= 0.5)
idx_50collapse = aggregate(as.list(idx_50['biotype']), idx_50['Row.names'],
FUN = function(X) paste(unique(X), collapse = ", "))
full$type.50Overlap = 'de novo'
idx_50 = match(idx_50collapse$Row.names,full$Row.names)
full[idx_50,]$type.50Overlap = idx_50collapse$biotype
if(!is.null(intron_gr)){
## check introns ##########
hits = findOverlaps(full_gr, intron_gr)
idx = unique(as.data.frame(mcols(full_gr[queryHits(hits)])))
full$hasIntron = 'no'
idx_intron = match(idx$Row.names,full$Row.names)
if(length(idx_intron) !=  0) full[idx_intron,]$hasIntron = 'yes'
}else(full$hasIntron = NA)
full$type.toPlot = ifelse(full$hasIntron == 'yes' & full$type.50Overlap == 'protein_coding',
'protein_coding_intron',full$type.50Overlap)
## grouping into 11 biotypes  ##########
full$type.toPlot = sapply(full$type.toPlot,function(x)
ifelse(grepl('protein_coding',x) & grepl('antisense',x), 'protein_coding_antisense',x))
full$type.toPlot = sapply(full$type.toPlot,function(x)
ifelse(grepl('protein_coding,',x), 'protein_coding_mixed',x))
full$type.toPlot = sapply(full$type.toPlot,function(x)
ifelse(grepl(', protein_coding',x), 'protein_coding_mixed',x))
full$type.toPlot = sapply(full$type.toPlot,function(x)
ifelse(grepl('lincRNA',x), 'lincRNA',x))
full$type.toPlot = sapply(full$type.toPlot,function(x)
ifelse(grepl('antisense,',x), 'antisense',x))
full$type.toPlot = sapply(full$type.toPlot,function(x)
ifelse(grepl(', antisense',x), 'antisense',x))
label = c('protein_coding',
'protein_coding_mixed',
'lincRNA',
'antisense',
'pseudogene, processed_pseudogene',
'pseudogene, unprocessed_pseudogene',
'de novo',
'protein_coding_antisense',
'protein_coding_intron',
'miRNA')
full$type.toPlot = sapply(full$type.toPlot,function(x)
ifelse(!x %in% label,'other_noncoding',x))
return(full)
}
roxyginse()
devtools::roxyginse()
library(roxygen2)
roxygenise()
install.packages("formatR")
formatR::tidy_dir("R")
devtools::use_data(gencode_gr,ILEF_gr,intron_gr,cod_gr, pkg="minipackage", internal = TRUE, overwrite = TRUE)
devtools::use_data(gencode_gr,ILEF_gr,intron_gr,cod_gr, pckg="minipackage", internal = TRUE, overwrite = TRUE)
data("cod_gr.chr21")
cod_gr
library(getminipackage)
?data
