#' @title Classifying Transcripts Using getBiotypes Function
#'
#' @description
#' The purpose of the getBiotypes function is to class both coding and noncoding\
#' transcripts into biotypes using the most recent GENCODE annotations.\
#' This tool can also be used to define potential lncRNAs, given an\
#' available genome transcriptome assembly (a gtf file) or any genomic\
#' loci of interest.
#'
#' @param full_gr A GRanges object of coding and noncoding transctipts. Unique identifications for each column must be assigned.More details can be found in the GRanges package
#' @param gencode_gr This GRanges object contains a GENCODE reference annotation.It must have a column of biotypes.
#' @param intron_gr A GRanges object containing the coordinates of introns.For details see "GRanges package".
#' @param minoverlap Detects minimum overlap between two IRanges objects. Details Overlap arguments are included in the IRanges package.
#'
#' @details For details of findOverlaps, type.partialOverlap, type.50Overlap and type.toPlot, see:\
#'         [GenomicRanges](https://www.bioconductor.org/packages/release/bioc/html/GenomicRanges.html) ,\
#'         [IRanges](https://www.bioconductor.org/packages/release/bioc/html/IRanges.html), and\
#'         [BiocManager](http://bioconductor.org/install/index.html)
#'
#' @return Returns the classified transcriptome results.
#'
#' @export
#'
#' @example
#' getBiotypes(ILEF_gr,gencode_gr,intron_gr)
#'
#' @note ILEF_gr is an area of interst filtred out of a raw sequence
#'
#' @references
#' Wang, Z. Z., J. M. Cunningham and X. H. Yang (2018)."CisPi: a transcriptomic score for disclosing cis-acting disease-associated lincRNAs." Bioinformatics34(17): 664-670"
getBiotypes <- function(full_gr, gencode_gr, intron_gr=NULL, minoverlap=1L){
if(class(full_gr) != "GRanges") stop('pls give full_gr as a "GRanges" object')
if(class(gencode_gr) != "GRanges") stop('pls give gencode_gr as a "GRanges" object')
if(class(intron_gr) != "GRanges" & !is.null(intron_gr)) stop('pls give intron_gr as a "GRanges" object')
hits = findOverlaps(full_gr, gencode_gr,
type = 'within',
minoverlap=minoverlap)
idx = as.data.frame(mcols(full_gr[queryHits(hits)]))
idx$type = as.data.frame(mcols(gencode_gr[subjectHits(hits)]))
idx_collapse = aggregate(as.list(idx[2]), idx[1],
FUN = function(X) paste(unique(X), collapse=", "))
full = as.data.frame(full_gr)
full$type.fullOverlap = 'de novo'
idx_full = match(idx_collapse$Row.names,full$Row.names)
full[idx_full,]$type.fullOverlap = idx_collapse$type
hits = findOverlaps(full_gr, gencode_gr,
minoverlap=minoverlap)
overlaps <- pintersect(full_gr[queryHits(hits)], gencode_gr[subjectHits(hits)])
percentOverlap <- width(overlaps) / width(gencode_gr[subjectHits(hits)])
idx = as.data.frame(mcols(full_gr[queryHits(hits)]))
idx$type = as.data.frame(mcols(gencode_gr[subjectHits(hits)]))
idx_collapse = aggregate(as.list(idx[2]), idx[1],
FUN = function(X) paste(unique(X), collapse=", "))
full$type.partialOverlap = 'de novo'
idx_partial = match(idx_collapse$Row.names,full$Row.names)
full[idx_partial,]$type.partialOverlap = idx_collapse$type
idx$percentOverlap = percentOverlap
idx_50 = subset(idx,percentOverlap>=0.5)
idx_50collapse = aggregate(as.list(idx_50[2]), idx_50[1],
FUN = function(X) paste(unique(X), collapse=", "))
full$type.50Overlap = 'de novo'
idx_50 = match(idx_50collapse$Row.names,full$Row.names)
full[idx_50,]$type.50Overlap = idx_50collapse$type
if(!is.null(intron_gr)){
hits = findOverlaps(full_gr, intron_gr)
idx = unique(as.data.frame(mcols(full_gr[queryHits(hits)])))
full$hasIntron = 'no'
idx_intron = match(idx$Row.names,full$Row.names)
full[idx_intron,]$hasIntron = 'yes'
}else(full$hasIntron = NA)
full$type.toPlot = ifelse(full$hasIntron == 'yes' & full$type.50Overlap == 'protein_coding',
'protein_coding_intron',full$type.50Overlap)
full$type.toPlot = sapply(full$type.toPlot,function(x)
ifelse(grepl('protein_coding',x) & grepl('antisense',x), 'protein_coding_antisense',x))
full$type.toPlot = sapply(full$type.toPlot,function(x)
ifelse(grepl('protein_coding,',x), 'protein_coding_mixed',x))
full$type.toPlot = sapply(full$type.toPlot,function(x)
ifelse(grepl(', protein_coding',x), 'protein_coding_mixed',x))
full$type.toPlot = sapply(full$type.toPlot,function(x)
ifelse(grepl('lincRNA',x), 'lincRNA',x))
full$type.toPlot = sapply(full$type.toPlot,function(x)
ifelse(grepl('antisense,',x), 'antisense',x))
full$type.toPlot = sapply(full$type.toPlot,function(x)
ifelse(grepl(', antisense',x), 'antisense',x))
label = c('protein_coding',
'protein_coding_mixed',
'lincRNA',
'antisense',
'pseudogene, processed_pseudogene',
'pseudogene, unprocessed_pseudogene',
'de novo',
'protein_coding_antisense',
'protein_coding_intron',
'miRNA')
full$type.toPlot = sapply(full$type.toPlot,function(x)
ifelse(!x %in% label,'other_noncoding',x))
return(full)
}
